// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// cellToPointsCpp
DataFrame cellToPointsCpp(NumericMatrix mat);
RcppExport SEXP _geomio_cellToPointsCpp(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(cellToPointsCpp(mat));
    return rcpp_result_gen;
END_RCPP
}
// countCellAdjacenciesCpp
NumericMatrix countCellAdjacenciesCpp(NumericMatrix& mat, bool doublecount);
RcppExport SEXP _geomio_countCellAdjacenciesCpp(SEXP matSEXP, SEXP doublecountSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< bool >::type doublecount(doublecountSEXP);
    rcpp_result_gen = Rcpp::wrap(countCellAdjacenciesCpp(mat, doublecount));
    return rcpp_result_gen;
END_RCPP
}
// countCellEdgesCpp
DataFrame countCellEdgesCpp(NumericMatrix& mat);
RcppExport SEXP _geomio_countCellEdgesCpp(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(countCellEdgesCpp(mat));
    return rcpp_result_gen;
END_RCPP
}
// countCellValuesCpp
DataFrame countCellValuesCpp(NumericMatrix& mat);
RcppExport SEXP _geomio_countCellValuesCpp(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(countCellValuesCpp(mat));
    return rcpp_result_gen;
END_RCPP
}
// diamondSquareCpp
NumericMatrix diamondSquareCpp(NumericMatrix mat, NumericVector stepSize, double roughness, double startDev);
RcppExport SEXP _geomio_diamondSquareCpp(SEXP matSEXP, SEXP stepSizeSEXP, SEXP roughnessSEXP, SEXP startDevSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type stepSize(stepSizeSEXP);
    Rcpp::traits::input_parameter< double >::type roughness(roughnessSEXP);
    Rcpp::traits::input_parameter< double >::type startDev(startDevSEXP);
    rcpp_result_gen = Rcpp::wrap(diamondSquareCpp(mat, stepSize, roughness, startDev));
    return rcpp_result_gen;
END_RCPP
}
// getValuesCpp
NumericVector getValuesCpp(NumericMatrix& mat);
RcppExport SEXP _geomio_getValuesCpp(SEXP matSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type mat(matSEXP);
    rcpp_result_gen = Rcpp::wrap(getValuesCpp(mat));
    return rcpp_result_gen;
END_RCPP
}
// matDistanceCpp
NumericMatrix matDistanceCpp(NumericMatrix mat, String method);
RcppExport SEXP _geomio_matDistanceCpp(SEXP matSEXP, SEXP methodSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< String >::type method(methodSEXP);
    rcpp_result_gen = Rcpp::wrap(matDistanceCpp(mat, method));
    return rcpp_result_gen;
END_RCPP
}
// matInGeomCpp
NumericMatrix matInGeomCpp(NumericMatrix& mat, NumericMatrix& geom, bool negative);
RcppExport SEXP _geomio_matInGeomCpp(SEXP matSEXP, SEXP geomSEXP, SEXP negativeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type geom(geomSEXP);
    Rcpp::traits::input_parameter< bool >::type negative(negativeSEXP);
    rcpp_result_gen = Rcpp::wrap(matInGeomCpp(mat, geom, negative));
    return rcpp_result_gen;
END_RCPP
}
// matReduceCpp
NumericMatrix matReduceCpp(List lMat, Function f);
RcppExport SEXP _geomio_matReduceCpp(SEXP lMatSEXP, SEXP fSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< List >::type lMat(lMatSEXP);
    Rcpp::traits::input_parameter< Function >::type f(fSEXP);
    rcpp_result_gen = Rcpp::wrap(matReduceCpp(lMat, f));
    return rcpp_result_gen;
END_RCPP
}
// scaleMatrixCpp
NumericMatrix scaleMatrixCpp(NumericMatrix mat, NumericVector range);
RcppExport SEXP _geomio_scaleMatrixCpp(SEXP matSEXP, SEXP rangeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type range(rangeSEXP);
    rcpp_result_gen = Rcpp::wrap(scaleMatrixCpp(mat, range));
    return rcpp_result_gen;
END_RCPP
}
// pointInPolyCpp
IntegerVector pointInPolyCpp(NumericMatrix& vert, NumericMatrix& geom, bool invert);
RcppExport SEXP _geomio_pointInPolyCpp(SEXP vertSEXP, SEXP geomSEXP, SEXP invertSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type vert(vertSEXP);
    Rcpp::traits::input_parameter< NumericMatrix& >::type geom(geomSEXP);
    Rcpp::traits::input_parameter< bool >::type invert(invertSEXP);
    rcpp_result_gen = Rcpp::wrap(pointInPolyCpp(vert, geom, invert));
    return rcpp_result_gen;
END_RCPP
}
// sortUniqueCpp
NumericVector sortUniqueCpp(NumericVector x);
RcppExport SEXP _geomio_sortUniqueCpp(SEXP xSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type x(xSEXP);
    rcpp_result_gen = Rcpp::wrap(sortUniqueCpp(x));
    return rcpp_result_gen;
END_RCPP
}
// subChrIntCpp
IntegerMatrix subChrIntCpp(CharacterMatrix& mat, CharacterVector& replace, IntegerVector& with);
RcppExport SEXP _geomio_subChrIntCpp(SEXP matSEXP, SEXP replaceSEXP, SEXP withSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< CharacterMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< CharacterVector& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< IntegerVector& >::type with(withSEXP);
    rcpp_result_gen = Rcpp::wrap(subChrIntCpp(mat, replace, with));
    return rcpp_result_gen;
END_RCPP
}
// subNumChrCpp
CharacterMatrix subNumChrCpp(NumericMatrix& mat, NumericVector& replace, CharacterVector with);
RcppExport SEXP _geomio_subNumChrCpp(SEXP matSEXP, SEXP replaceSEXP, SEXP withSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< CharacterVector >::type with(withSEXP);
    rcpp_result_gen = Rcpp::wrap(subNumChrCpp(mat, replace, with));
    return rcpp_result_gen;
END_RCPP
}
// subNumNumCpp
NumericMatrix subNumNumCpp(NumericMatrix& mat, NumericVector& replace, NumericVector with);
RcppExport SEXP _geomio_subNumNumCpp(SEXP matSEXP, SEXP replaceSEXP, SEXP withSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type mat(matSEXP);
    Rcpp::traits::input_parameter< NumericVector& >::type replace(replaceSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type with(withSEXP);
    rcpp_result_gen = Rcpp::wrap(subNumNumCpp(mat, replace, with));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_geomio_cellToPointsCpp", (DL_FUNC) &_geomio_cellToPointsCpp, 1},
    {"_geomio_countCellAdjacenciesCpp", (DL_FUNC) &_geomio_countCellAdjacenciesCpp, 2},
    {"_geomio_countCellEdgesCpp", (DL_FUNC) &_geomio_countCellEdgesCpp, 1},
    {"_geomio_countCellValuesCpp", (DL_FUNC) &_geomio_countCellValuesCpp, 1},
    {"_geomio_diamondSquareCpp", (DL_FUNC) &_geomio_diamondSquareCpp, 4},
    {"_geomio_getValuesCpp", (DL_FUNC) &_geomio_getValuesCpp, 1},
    {"_geomio_matDistanceCpp", (DL_FUNC) &_geomio_matDistanceCpp, 2},
    {"_geomio_matInGeomCpp", (DL_FUNC) &_geomio_matInGeomCpp, 3},
    {"_geomio_matReduceCpp", (DL_FUNC) &_geomio_matReduceCpp, 2},
    {"_geomio_scaleMatrixCpp", (DL_FUNC) &_geomio_scaleMatrixCpp, 2},
    {"_geomio_pointInPolyCpp", (DL_FUNC) &_geomio_pointInPolyCpp, 3},
    {"_geomio_sortUniqueCpp", (DL_FUNC) &_geomio_sortUniqueCpp, 1},
    {"_geomio_subChrIntCpp", (DL_FUNC) &_geomio_subChrIntCpp, 3},
    {"_geomio_subNumChrCpp", (DL_FUNC) &_geomio_subNumChrCpp, 3},
    {"_geomio_subNumNumCpp", (DL_FUNC) &_geomio_subNumNumCpp, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_geomio(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
